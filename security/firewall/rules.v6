# IPv6 Firewall Rules for dVPN IoT System
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Custom chains for specific services
:SERVICES - [0:0]
:DOCKER-USER - [0:0]
:VPN - [0:0]
:BLOCKCHAIN - [0:0]
:MONITORING - [0:0]
:DOS-PROTECT - [0:0]

# Allow established connections
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow loopback
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

# ICMPv6 rules (necessary for IPv6 to work properly)
# Router advertisements
-A INPUT -p ipv6-icmp --icmpv6-type router-advertisement -j ACCEPT
# Neighbor solicitation
-A INPUT -p ipv6-icmp --icmpv6-type neighbor-solicitation -j ACCEPT
# Neighbor advertisement
-A INPUT -p ipv6-icmp --icmpv6-type neighbor-advertisement -j ACCEPT
# Multicast listener discovery
-A INPUT -p ipv6-icmp --icmpv6-type 130 -j ACCEPT
-A INPUT -p ipv6-icmp --icmpv6-type 131 -j ACCEPT
-A INPUT -p ipv6-icmp --icmpv6-type 132 -j ACCEPT
# Echo request (ping)
-A INPUT -p ipv6-icmp --icmpv6-type echo-request -m limit --limit 5/sec -j ACCEPT
# Parameter problem
-A INPUT -p ipv6-icmp --icmpv6-type parameter-problem -j ACCEPT
# Packet too big
-A INPUT -p ipv6-icmp --icmpv6-type packet-too-big -j ACCEPT

# Anti-DOS rules
-A INPUT -p tcp -m conntrack --ctstate NEW -j DOS-PROTECT
-A DOS-PROTECT -m hashlimit --hashlimit-above 50/sec --hashlimit-burst 100 --hashlimit-mode srcip --hashlimit-name conn_rate_limit_v6 -j DROP
-A DOS-PROTECT -m hashlimit --hashlimit-above 20/sec --hashlimit-burst 50 --hashlimit-mode srcip,dstport --hashlimit-name per_port_conn_rate_limit_v6 -j DROP

# Basic service rules
-A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j SERVICES
-A SERVICES -p tcp --dport 22 -m recent --name SSH6 --set
-A SERVICES -p tcp --dport 22 -m recent --name SSH6 --rcheck --seconds 60 --hitcount 4 -j DROP
-A SERVICES -p tcp --dport 22 -j ACCEPT

# VPN rules
-A INPUT -p udp --dport 1194 -j VPN
-A VPN -m conntrack --ctstate NEW -m recent --name VPN6 --set
-A VPN -m conntrack --ctstate NEW -m recent --name VPN6 --rcheck --seconds 60 --hitcount 10 -j DROP
-A VPN -j ACCEPT

# Allow VPN forwarding
-A FORWARD -i tun+ -j ACCEPT
-A FORWARD -o tun+ -j ACCEPT
-A FORWARD -i tun+ -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i eth0 -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT

# Blockchain rules
-A INPUT -p tcp -m multiport --dports 7050,7051,7052,7053,7054 -j BLOCKCHAIN
-A BLOCKCHAIN -m conntrack --ctstate NEW -m recent --name BLOCKCHAIN6 --set
-A BLOCKCHAIN -m conntrack --ctstate NEW -m recent --name BLOCKCHAIN6 --rcheck --seconds 60 --hitcount 20 -j DROP
-A BLOCKCHAIN -j ACCEPT

# Monitoring rules
-A INPUT -p tcp -m multiport --dports 9090,3000,9100 -j MONITORING
-A MONITORING -m conntrack --ctstate NEW -m recent --name MONITORING6 --set
-A MONITORING -m conntrack --ctstate NEW -m recent --name MONITORING6 --rcheck --seconds 60 --hitcount 10 -j DROP
-A MONITORING -j ACCEPT

# Docker rules
-A DOCKER-USER -j RETURN

# Log dropped packets (limit logging rate)
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "ip6tables_INPUT_denied: " --log-level 7
-A FORWARD -m limit --limit 5/min -j LOG --log-prefix "ip6tables_FORWARD_denied: " --log-level 7

COMMIT

# NAT rules (if IPv6 NAT is needed)
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# NAT for VPN clients (if using IPv6 VPN)
-A POSTROUTING -s fd00::/64 -o eth0 -j MASQUERADE

COMMIT

# Mangle rules for QoS
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# Mark VPN traffic for QoS
-A FORWARD -i tun+ -j MARK --set-mark 0x1
-A FORWARD -o tun+ -j MARK --set-mark 0x1

# Mark blockchain traffic for QoS
-A FORWARD -p tcp -m multiport --dports 7050,7051,7052,7053,7054 -j MARK --set-mark 0x2

COMMIT